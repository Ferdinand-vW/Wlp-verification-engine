module {SyntaxTransformer}
{
Stmt(..), Expr(..), Var(..), ProgramInfo(..), collectVars, collectPrograms, collectRefs
}
{
import qualified Data.Map as M
import qualified Data.Set as S
import qualified Data.List as L
import Data.Maybe
import Data.SBV(SInteger)
}


include "Grammar.ag"

{
collectVars :: Stmt -> S.Set Var
collectVars stmt = allVars_Syn_Top $ wrap_Top (sem_Top (Top stmt (Lit 0))) Inh_Top

collectRefs :: Expr -> S.Set String
collectRefs expr = allRefs_Syn_Top $ wrap_Top (sem_Top (Top (Vars [] []) expr)) Inh_Top

collectPrograms :: Stmt -> M.Map String ([Var],[Var],Body)
collectPrograms stmt = allProgs_Syn_Top $ wrap_Top (sem_Top (Top stmt (Lit 0))) Inh_Top
}

data Top | Top stmt :: Stmt expr :: Expr

data ProgramInfo | ProgramInfo varMap :: {S.Set Var} progMap :: {M.Map String ([Var],[Var],Body)}

attr Top
  syn allVars :: {S.Set Var}
  syn allRefs :: {S.Set String}
  syn allProgs :: {M.Map String ([Var],[Var],Body)}

sem Top
  | Top lhs.allVars = @stmt.allVars
        lhs.allProgs = @stmt.allProgs
        lhs.allRefs = @expr.allRefs

attr Body Stmt Exprs Expr
  syn allVars :: {S.Set Var}
  syn copy :: self

attr Exprs Expr
  syn allRefs :: {S.Set String}

attr Body Stmt
  syn allProgs :: {M.Map String ([Var],[Var],Body)}

sem Stmt
  | Vars    lhs.allProgs = @body.allProgs
            lhs.allVars = S.union (S.fromList @vars) @body.allVars
  | Prog    lhs.allProgs = M.singleton @name (@params, @results, @body.copy)
            lhs.allVars = S.union (S.fromList (@params ++ @results)) @body.allVars
  | PCall   lhs.allProgs = M.empty
            lhs.allVars = S.union @args.allVars @res.allVars
  | Pre     lhs.allProgs = M.empty
            lhs.allVars = @expr.allVars
  | Post    lhs.allProgs = M.empty
            lhs.allVars = @expr.allVars
  | Inv     lhs.allProgs = M.empty
            lhs.allVars = S.union @expr.allVars @stmt.allVars
  | While   lhs.allProgs = M.empty
            lhs.allVars = S.union @expr.allVars @body.allVars
  | If      lhs.allProgs = M.empty
            lhs.allVars = S.union (S.union @expr.allVars @left.allVars) @right.allVars
  | Assign  lhs.allProgs = M.empty
            lhs.allVars = S.union @expr1.allVars @expr2.allVars
  | Sim     lhs.allProgs = M.empty
            lhs.allVars = S.union @left.allVars @right.allVars
  | Skip    lhs.allProgs = M.empty
            lhs.allVars = S.empty

sem Body
  | Cons lhs.allProgs = M.union @hd.allProgs @tl.allProgs
         lhs.allVars = S.union @hd.allVars @tl.allVars
  | Nil  lhs.allProgs = M.empty
         lhs.allVars = S.empty

sem Expr
  | Lit lhs.allVars = S.empty
        lhs.allRefs = S.empty
  | Name lhs.allVars = S.empty
         lhs.allRefs = S.singleton @var
  | ForAll lhs.allVars = S.union (S.singleton (Univ @var)) @expr.allVars
           lhs.allRefs = @expr.allRefs
  | Minus lhs.allVars = S.union @expr1.allVars @expr2.allVars
          lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs 
  | Plus lhs.allVars = S.union @expr1.allVars @expr2.allVars
         lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs
  | Equal lhs.allVars = S.union @expr1.allVars @expr2.allVars
          lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs
  | Lower lhs.allVars = S.union @expr1.allVars @expr2.allVars
          lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs
  | LowerE lhs.allVars = S.union @expr1.allVars @expr2.allVars
            lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs
  | And lhs.allVars = S.union @expr1.allVars @expr2.allVars
        lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs
  | Or lhs.allVars = S.union @expr1.allVars @expr2.allVars
        lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs
  | Impl lhs.allVars = S.union @expr1.allVars @expr2.allVars
        lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs
  | Repby lhs.allVars = S.union @expr1.allVars @expr2.allVars
          lhs.allRefs = S.union @expr1.allRefs @expr2.allRefs
  | Not lhs.allVars = @expr.allVars
        lhs.allRefs = @expr.allRefs
  | True_ lhs.allVars = S.empty
          lhs.allRefs = S.empty

sem Exprs
  | Cons lhs.allVars = S.union @hd.allVars @tl.allVars
         lhs.allRefs = S.union @hd.allRefs @tl.allRefs
  | Nil  lhs.allVars = S.empty
         lhs.allRefs = S.empty